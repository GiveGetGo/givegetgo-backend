name: GiveGetGo CD Workflow for Development

on:
  push:
    branches:
      - development

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/development'
    steps:
      # Checkout the repository
      - name: Checkout
        uses: actions/checkout@v4

      # # Setup for deployment, e.g., configure AWS credentials
      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v4
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: ${{ secrets.AWS_REGION }}

      # # Login to AWS ECR service
      # - name: Login to AWS ECR
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@v2

      # Determine which services have changed
      # - name: Check for changed services
      #   id: changed_services
      #   run: |
      #     echo "::set-output name=user_service_changed::$(git diff --name-only ${{ github.sha }} ${{ github.event.before }} | grep -q 'servers/user' && echo 'true' || echo 'false')"
      #     echo "::set-output name=verification_service_changed::$(git diff --name-only ${{ github.sha }} ${{ github.event.before }} | grep -q 'servers/verification' && echo 'true' || echo 'false')"

      # Set up Docker environment variables
      - name: Set up Docker environment variables
        run: |
          echo "ECR_REGISTRY=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com" >> $GITHUB_ENV
          echo "NGINX_REPO_NAME=${{ secrets.AWS_ECR_NGINX_REPO }}" >> $GITHUB_ENV
          echo "GIVEGETGO_REPO_NAME=${{ secrets.AWS_ECR_GIVEGETGO_REPO }}" >> $GITHUB_ENV
          echo "IMAGE_TAG=$(echo $GITHUB_SHA | cut -c1-7)-$(date +%Y%m%d%H%M)" >> $GITHUB_ENV

      # # Decode the .env.user file
      # - name: Decode the .env.user file
      #   run: |
      #     echo "${{ secrets.USER_SERVICE_ENV }}" | base64 -d > ./servers/user/.env.user

      # # Decode the .env.verification file
      # - name: Decode the .env.verification file
      #   run: |
      #     echo "${{ secrets.VERIFICATION_SERVICE_ENV }}" | base64 -d > ./servers/verification/.env.verification

      # # Decode the .env.post file
      # - name: Decode the .env.post file
      #   run: |
      #     echo "${{ secrets.POST_SERVICE_ENV }}" | base64 -d > ./servers/post/.env.post
      
      # # Decode the .env.bid file
      # - name: Decode the .env.bid file
      #   run: |
      #     echo "${{ secrets.BID_SERVICE_ENV }}" | base64 -d > ./servers/bid/.env.bid
      
      # # Decode the .env.match file
      # - name: Decode the .env.match file
      #   run: |
      #     echo "${{ secrets.MATCH_SERVICE_ENV }}" | base64 -d > ./servers/match/.env.match

      # # Build and push Docker images
      # - name: Build and push Docker images
      #   run: |
      #     declare -a services=("nginx" "user" "verification" "post" "bid" "match")
      #     for service in "${services[@]}"; do
      #       if [ "$service" == "nginx" ]; then
      #         image_tag=$IMAGE_TAG
      #         path="./nginx"
      #         repo_name=$NGINX_REPO_NAME
      #       else
      #         image_tag="${service}-$IMAGE_TAG"
      #         path="./servers/$service"
      #         repo_name=$GIVEGETGO_REPO_NAME
      #       fi
      
      #       docker build -t $ECR_REGISTRY/$repo_name:dev-$image_tag $path
      #       docker push $ECR_REGISTRY/$repo_name:dev-$image_tag
      #     done
      #   shell: bash

      # Configure AWS credentials for EKS
      - name: Configure AWS credentials for EKS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_EKS_IAM_ROLE_ARN }}
          role-session-name: ci-run-${{ github.run_id }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Update EKS kube config to use AWS IAM Authenticator
      - name: Update EKS config
        run: |
          aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name ${{ secrets.AWS_EKS_CLUSTER_NAME }} --role-arn ${{ secrets.AWS_EKS_IAM_ROLE_ARN }} --kubeconfig ${HOME}/.kube/config
          echo "KUBECONFIG=${HOME}/.kube/config" >> $GITHUB_ENV
            
      # Install Helm
      - name: Install Helm
        run: |
          curl -fsSL https://get.helm.sh/helm-v3.14.2-linux-amd64.tar.gz | tar xz
          sudo mv linux-amd64/helm /usr/local/bin/helm

      # Install Helm S3 plugin
      - name: Install Helm S3 plugin
        run: |
          helm plugin install https://github.com/hypnoglow/helm-s3.git
    
      # Add Helm S3 repo
      - name: Add Helm S3 repo
        run: |
          helm repo add givegetgo-dev ${{ secrets.AWS_S3_HELM_REPO }}
        
      # Update Helm repositories
      - name: Update Helm repositories
        run: helm repo update
    
      # Check eks config
      - name: Check eks config
        run: |
          cat ${HOME}/.kube/config
          echo $KUBECONFIG
          kubectl config current-context
          kubectl get nodes
        
      # Update Helm chart repo and tag for the each service
      - name: Update Helm charts
        run: |
          for chart in nginx user verification post bid match redis; do
            if [ "$chart" = "nginx" ]; then
              repo_name=$NGINX_REPO_NAME
              tag=$IMAGE_TAG
            else
              repo_name=$GIVEGETGO_REPO_NAME
              tag=${chart}-$IMAGE_TAG
            fi
            helm upgrade --install $chart /charts/$chart \
              --set image.repository=$ECR_REGISTRY/$repo_name \
              --set image.tag=$tag \
              --namespace=development \
              --debug
          done
      
      # Update Helm chart repo and tag for the each postgres service
      - name: Update postgres Helm charts
        run: |
          for service in user verification post bid match; do
            helm upgrade --install ${service}-postgres /charts/${service}/charts/${service}-postgres \
              --set image.repository=$ECR_REGISTRY/$GIVEGETGO_REPO_NAME \
              --set image.tag=${service}-postgres-$IMAGE_TAG \
              --namespace=development \
              --debug
          done
