name: GiveGetGo CD Workflow for Production

on:
  push:
    branches:
      - main

jobs:
  # Check secrets changes
  check-secrets-changes:
    runs-on: ubuntu-latest
    outputs:
      secrets-changed: ${{ steps.secrets-version-check.outputs.secrets-changed }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all commits to get the previous commit
  
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig
        run: aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name ${{ secrets.AWS_EKS_CLUSTER_NAME }} 

      - name: Check for secrets version changes
        id: secrets-version-check
        run: |
          current_version=$(kubectl get configmap givegetgo-secrets-version -o=jsonpath='{.data.version}')
          echo "Current EKS secrets version: $current_version"
          echo "Secrets version from GitHub: ${{ secrets.SECRETS_VERSION }}"
          if [ "$current_version" != "${{ secrets.SECRETS_VERSION }}" ]; then
            echo "secrets-changed=true" >> $GITHUB_OUTPUT
          else
            echo "secrets-changed=false" >> $GITHUB_OUTPUT
          fi

  # Check code changes
  check-code-changes:
    runs-on: ubuntu-latest
    outputs:
      nginx-changed: ${{ steps.check-changes.outputs.nginx-changed }}
      user-changed: ${{ steps.check-changes.outputs.user-changed }}
      verification-changed: ${{ steps.check-changes.outputs.verification-changed }}
      post-changed: ${{ steps.check-changes.outputs.post-changed }}
      bid-changed: ${{ steps.check-changes.outputs.bid-changed }}
      match-changed: ${{ steps.check-changes.outputs.match-changed }}
      redis-changed: ${{ steps.check-changes.outputs.redis-changed }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all commits to get the previous commit

      - name: Check for code changes
        id: check-changes
        run: |
          # Get the previous commit on the development branch
          prev_commit=$(git rev-parse development^1)
          
          # Check if there are any changes in specific files/directories
          nginx_changed=$(git diff --quiet $prev_commit HEAD -- ./nginx || echo 'true')
          user_changed=$(git diff --quiet $prev_commit HEAD -- ./servers/user || echo 'true')
          verification_changed=$(git diff --quiet $prev_commit HEAD -- ./servers/verification || echo 'true')
          post_changed=$(git diff --quiet $prev_commit HEAD -- ./servers/post || echo 'true')
          bid_changed=$(git diff --quiet $prev_commit HEAD -- ./servers/bid || echo 'true')
          match_changed=$(git diff --quiet $prev_commit HEAD -- ./servers/match || echo 'true')
          redis_changed=$(git diff --quiet $prev_commit HEAD -- ./redis || echo 'true')
          
          # Output the results as step outputs
          echo "nginx-changed=$nginx_changed" >> $GITHUB_OUTPUT
          echo "user-changed=$user_changed" >> $GITHUB_OUTPUT
          echo "verification-changed=$verification_changed" >> $GITHUB_OUTPUT
          echo "post-changed=$post_changed" >> $GITHUB_OUTPUT
          echo "bid-changed=$bid_changed" >> $GITHUB_OUTPUT
          echo "match-changed=$match_changed" >> $GITHUB_OUTPUT
          echo "redis-changed=$redis_changed" >> $GITHUB_OUTPUT

  # Build and push Docker images to ECR
  deploy-images-ecr:
    runs-on: ubuntu-latest
    needs: [check-code-changes, check-secrets-changes]
    if: |
      github.ref == 'refs/heads/main' &&
      (
        needs.check-code-changes.outputs.nginx-changed == 'true' ||
        needs.check-code-changes.outputs.user-changed == 'true' ||
        needs.check-code-changes.outputs.verification-changed == 'true' ||
        needs.check-code-changes.outputs.post-changed == 'true' ||
        needs.check-code-changes.outputs.bid-changed == 'true' ||
        needs.check-code-changes.outputs.match-changed == 'true' ||
        needs.check-code-changes.outputs.redis-changed == 'true' ||
        needs.check-secrets-changes.outputs.secrets-changed == 'true'
      )
    env:
      ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
      NGINX_REPO_NAME: ${{ secrets.AWS_ECR_NGINX_REPO }}
      GIVEGETGO_REPO_NAME: ${{ secrets.AWS_ECR_GIVEGETGO_REPO }}
      NGINX_CHANGED: ${{ needs.check-code-changes.outputs.nginx-changed }}
      REDIS_CHANGED: ${{ needs.check-code-changes.outputs.redis-changed }}
      USER_CHANGED: ${{ needs.check-code-changes.outputs.user-changed }}
      VERIFICATION_CHANGED: ${{ needs.check-code-changes.outputs.verification-changed }}
      POST_CHANGED: ${{ needs.check-code-changes.outputs.post-changed }}
      BID_CHANGED: ${{ needs.check-code-changes.outputs.bid-changed }}
      MATCH_CHANGED: ${{ needs.check-code-changes.outputs.match-changed }}
      SECRETS_CHANGED: ${{ needs.check-secrets-changes.outputs.secrets-changed }}
    outputs:
      image-tag: ${{ steps.generate-image-tag.outputs.image_tag }}
    steps:
      # Checkout the repository
      - name: Checkout
        uses: actions/checkout@v4
      
      # Generate image tag
      - name: Generate image tag
        id: generate-image-tag 
        run: |
          image_tag=$(echo $GITHUB_SHA | cut -c1-7)-$(date +%Y%m%d%H%M)
          echo "IMAGE_TAG=$image_tag" >> $GITHUB_ENV
          echo "image_tag=$image_tag" >> $GITHUB_OUTPUT

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Login to AWS ECR service
      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Determine which services have changed
      # - name: Check for changed services
      #   id: changed_services
      #   run: |
      #     echo "::set-output name=user_service_changed::$(git diff --name-only ${{ github.sha }} ${{ github.event.before }} | grep -q 'servers/user' && echo 'true' || echo 'false')"
      #     echo "::set-output name=verification_service_changed::$(git diff --name-only ${{ github.sha }} ${{ github.event.before }} | grep -q 'servers/verification' && echo 'true' || echo 'false')"

      - name: Generate environment files for Docker Compose
        run: |
          echo "ECR_REGISTRY=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com" >> $GITHUB_ENV
          echo "NGINX_REPO_NAME=${{ secrets.AWS_ECR_NGINX_REPO }}" >> $GITHUB_ENV
          echo "GIVEGETGO_REPO_NAME=${{ secrets.AWS_ECR_GIVEGETGO_REPO }}" >> $GITHUB_ENV
          echo "IMAGE_TAG=$(echo $GITHUB_SHA | cut -c1-7)-$(date +%Y%m%d%H%M)" >> $GITHUB_ENV

      # Build and push nginx:
      - name: Build and push nginx
        run: |
          docker build -t $ECR_REGISTRY/$NGINX_REPO_NAME:$IMAGE_TAG ./nginx
          docker push $ECR_REGISTRY/$NGINX_REPO_NAME:$IMAGE_TAG

      # Build and push user-service
      - name: Build and push user-service
        run: |
          docker build -t $ECR_REGISTRY/$GIVEGETGO_REPO_NAME:$user-IMAGE_TAG ./servers/user
          docker push $ECR_REGISTRY/GIVEGETGO_REPO_NAME:user-$IMAGE_TAG

      # Build and push verification-service
      - name: Build and push verification-service
        run: |
          docker build -t $ECR_REGISTRY/$GIVEGETGO_REPO_NAME:verification-$IMAGE_TAG ./servers/verification
          docker push $ECR_REGISTRY/$GIVEGETGO_REPO_NAME:verification-$IMAGE_TAG
        
      # Build and push post-service
      - name: Build and push post-service
        run: |
          docker build -t $ECR_REGISTRY/$GIVEGETGO_REPO_NAME:post-$IMAGE_TAG ./servers/post
          docker push $ECR_REGISTRY/$GIVEGETGO_REPO_NAME:post-$IMAGE_TAG

      # Build and push match-service
      - name: Build and push match-service
        run: |
          docker build -t $ECR_REGISTRY/$GIVEGETGO_REPO_NAME:$IMAGE_TAG ./servers/match
          docker push $ECR_REGISTRY/$GIVEGETGO_REPO_NAME:match$IMAGE_TAG

      # Build and push bid-service
      - name: Build and push bid-service
        run: |
          docker build -t $ECR_REGISTRY/$GIVEGETGO_REPO_NAME:bid-$IMAGE_TAG ./servers/bid
          docker push $ECR_REGISTRY/$GIVEGETGO_REPO_NAME:bid-$IMAGE_TAG

      # Build and push redis
      - name: Build and push redis
        run: |
          docker build -t $ECR_REGISTRY/$GIVEGETGO_REPO_NAME:redis-$IMAGE_TAG ./servers/redis
          docker push $ECR_REGISTRY/$GIVEGETGO_REPO_NAME:redis-$IMAGE_TAG

      # Update Helm chart repo and tag
      - name: Update nginx Helm chart
        run: |
          helm upgrade --install nginx /charts/nginx \
            --set image.repository=$ECR_REGISTRY/$NGINX_REPO_NAME \
            --set image.tag=$IMAGE_TAG

      - name: Update user Helm chart
        run: |
          helm upgrade --install user /charts/user \
            --set image.repository=$ECR_REGISTRY/$GIVEGETGO_REPO_NAME \
            --set image.tag=user-$IMAGE_TAG

      - name: Update verification Helm chart
        run: |
          helm upgrade --install verification /charts/verification \
            --set image.repository=$ECR_REGISTRY/$GIVEGETGO_REPO_NAME \
            --set image.tag=verification-$IMAGE_TAG

      - name: Update post Helm chart
        run: |
          helm upgrade --install post /charts/post \
            --set image.repository=$ECR_REGISTRY/$GIVEGETGO_REPO_NAME \
            --set image.tag=post-$IMAGE_TAG

      - name: Update bid Helm chart
        run: |
          helm upgrade --install bid /charts/bid \
            --set image.repository=$ECR_REGISTRY/$GIVEGETGO_REPO_NAME \
            --set image.tag=bid-$IMAGE_TAG
        
      - name: Update match Helm chart
        run: |
          helm upgrade --install match /charts/match \
            --set image.repository=$ECR_REGISTRY/$GIVEGETGO_REPO_NAME \
            --set image.tag=match-$IMAGE_TAG

      # Update Helm chart repo and tag for the each postgres service
      - name: Update user-postgres Helm chart
        run: |
          declare -a services=("nginx" "user" "verification" "post" "bid" "match" "redis")

          for service in "${services[@]}"; do
            SERVICE_UPPER=$(echo "$service" | tr '[:lower:]' '[:upper:]')
            SERVICE_CHANGED_VAR="${SERVICE_UPPER}_CHANGED"
            if [ "${!SERVICE_CHANGED_VAR}" == "true" ] || [ "$SECRET_CHANGED" = "true" ]; then
              if [ "$service" == "nginx" ]; then
                image_tag="dev-nginx-$IMAGE_TAG"
                path="./nginx"
                repo_name=$NGINX_REPO_NAME
              elif [ "$service" == "redis" ]; then
                image_tag="dev-redis-$IMAGE_TAG"
                path="./redis"
                repo_name=$GIVEGETGO_REPO_NAME
              else
                image_tag="dev-${service}-$IMAGE_TAG"
                path="./servers/$service"
                repo_name=$GIVEGETGO_REPO_NAME
              fi

              docker build -t $ECR_REGISTRY/$repo_name:$image_tag $path
              docker push $ECR_REGISTRY/$repo_name:$image_tag
            fi
          done
        shell: bash
              

  # Create Kubernetes secrets for all services
  create-eks-secrets:
    runs-on: ubuntu-latest
    needs: [check-secrets-changes]
    if: github.ref == 'refs/heads/development' && needs.check-secrets-changes.outputs.secrets-changed == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update EKS config
        run: |
          aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name ${{ secrets.AWS_EKS_CLUSTER_NAME }}

      # Decode env files for user-service and user-postgres
      - name: Decode Environment File and Create Secret for user-service
        run: |
          echo "${{ secrets.USER_SERVICE_ENV }}" | base64 -d > ./user-service.env
          kubectl create secret generic user-secrets --from-env-file=./user-service.env --namespace givegetgo-user
          echo "${{ secrets.USER_POSTGRES_ENV }}" | base64 -d > ./user-postgres.env
          kubectl create secret generic user-postgres-secrets --from-env-file=./user-postgres.env --namespace givegetgo-user
        shell: bash

      # Decode env files for verification-service and verification-postgres
      - name: Decode Environment File and Create Secret for verification-service
        run: |
          echo "${{ secrets.VERIFICATION_SERVICE_ENV }}" | base64 -d > ./verification-service.env
          kubectl create secret generic verification-secrets --from-env-file=./verification-service.env --namespace givegetgo-verification
          echo "${{ secrets.VERIFICATION_POSTGRES_ENV }}" | base64 -d > ./verification-postgres.env
          kubectl create secret generic verification-postgres-secrets --from-env-file=./verification-postgres.env --namespace givegetgo-verification
        shell: bash

      # Decode env files for post-service and post-postgres
      - name: Decode Environment File and Create Secret for post-service
        run: |
          echo "${{ secrets.POST_SERVICE_ENV }}" | base64 -d > ./post-service.env
          kubectl create secret generic post-secrets --from-env-file=./post-service.env --namespace givegetgo-post
          echo "${{ secrets.POST_POSTGRES_ENV }}" | base64 -d > ./post-postgres.env
          kubectl create secret generic post-postgres-secrets --from-env-file=./post-postgres.env --namespace givegetgo-post
        shell: bash

      # Decode env files for bid-service and bid-postgres
      - name: Decode Environment File and Create Secret for bid-service
        run: |
          echo "${{ secrets.BID_SERVICE_ENV }}" | base64 -d > ./bid-service.env
          kubectl create secret generic bid-secrets --from-env-file=./bid-service.env --namespace givegetgo-bid
          echo "${{ secrets.BID_POSTGRES_ENV }}" | base64 -d > ./bid-postgres.env
          kubectl create secret generic bid-postgres-secrets --from-env-file=./bid-postgres.env --namespace givegetgo-bid
        shell: bash
      
      # Decode env files for match-service and match-postgres
      - name: Decode Environment File and Create Secret for match-service
        run: |
          echo "${{ secrets.MATCH_SERVICE_ENV }}" | base64 -d > ./match-service.env
          kubectl create secret generic match-secrets --from-env-file=./match-service.env --namespace givegetgo-match
          echo "${{ secrets.MATCH_POSTGRES_ENV }}" | base64 -d > ./match-postgres.env
          kubectl create secret generic match-postgres-secrets --from-env-file=./match-postgres.env --namespace givegetgo-match
        shell: bash
