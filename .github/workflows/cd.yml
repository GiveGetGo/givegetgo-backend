name: GiveGetGo CD Workflow for Production

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      # Checkout the repository
      - name: Checkout
        uses: actions/checkout@v4

      # Setup for deployment, e.g., configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Login to AWS ECR service
      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Determine which services have changed
      # - name: Check for changed services
      #   id: changed_services
      #   run: |
      #     echo "::set-output name=user_service_changed::$(git diff --name-only ${{ github.sha }} ${{ github.event.before }} | grep -q 'servers/user' && echo 'true' || echo 'false')"
      #     echo "::set-output name=verification_service_changed::$(git diff --name-only ${{ github.sha }} ${{ github.event.before }} | grep -q 'servers/verification' && echo 'true' || echo 'false')"

      # Set up Docker environment variables
      - name: Set up Docker environment variables
        run: |
          echo "ECR_REGISTRY=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com" >> $GITHUB_ENV
          echo "NGINX_REPO_NAME=${{ secrets.AWS_ECR_NGINX_REPO }}" >> $GITHUB_ENV
          echo "GIVEGETGO_REPO_NAME=${{ secrets.AWS_ECR_GIVEGETGO_REPO }}" >> $GITHUB_ENV
          echo "IMAGE_TAG=$(echo $GITHUB_SHA | cut -c1-7)-$(date +%Y%m%d%H%M)" >> $GITHUB_ENV

      # Decode the .env.user file
      - name: Decode the .env.user file
        run: |
          echo "${{ secrets.USER_SERVICE_ENV }}" | base64 -d > ./servers/user/.env.user

      # Decode the .env.verification file
      - name: Decode the .env.verification file
        run: |
          echo "${{ secrets.VERIFICATION_SERVICE_ENV }}" | base64 -d > ./servers/verification/.env.verification

      # Decode the .env.post file
      - name: Decode the .env.post file
        run: |
          echo "${{ secrets.POST_SERVICE_ENV }}" | base64 -d > ./servers/post/.env.post
      
      # Decode the .env.bid file
      - name: Decode the .env.bid file
        run: |
          echo "${{ secrets.BID_SERVICE_ENV }}" | base64 -d > ./servers/bid/.env.bid
      
      # Decode the .env.match file
      - name: Decode the .env.match file
        run: |
          echo "${{ secrets.MATCH_SERVICE_ENV }}" | base64 -d > ./servers/match/.env.match

      # Build and push Docker images
      - name: Build and push Docker images
        run: |
          declare -a services=("nginx" "user" "verification" "post" "bid" "match")
          for service in "${services[@]}"; do
            if [ "$service" == "nginx" ]; then
              image_tag=$IMAGE_TAG
              path="./nginx"
              repo_name=$NGINX_REPO_NAME
            else
              image_tag="${service}-$IMAGE_TAG"
              path="./servers/$service"
              repo_name=$GIVEGETGO_REPO_NAME
            fi
      
            docker build -t $ECR_REGISTRY/$repo_name:$image_tag $path
            docker push $ECR_REGISTRY/$repo_name:$image_tag
          done
        shell: bash

      # Update EKS kube config
      - name: Update EKS config
        run: |
          aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name ${{ secrets.AWS_EKS_CLUSTER_NAME }}

      # Install Helm
      - name: Install Helm
        run: |
          curl https://get.helm.sh/helm-v3.5.4-linux-amd64.tar.gz | tar xz
          sudo mv linux-amd64/helm /usr/local/bin/helm
    
      # Install Helm S3 plugin
      - name: Install Helm S3 plugin
        run: |
          helm plugin install https://github.com/hypnoglow/helm-s3.git

      # Update Helm chart repo and tag for the each service
      - name: Update Helm charts
        run: |
          for chart in nginx user verification post bid match redis; do
            if [ "$chart" = "nginx" ]; then
              repo_name=$NGINX_REPO_NAME
              tag=$IMAGE_TAG
            else
              repo_name=$GIVEGETGO_REPO_NAME
              tag=${chart}-$IMAGE_TAG
            fi
            helm upgrade --install $chart /charts/$chart \
              --set image.repository=$ECR_REGISTRY/$repo_name \
              --set image.tag=$tag
          done
      
      # Update Helm chart repo and tag for the each postgres service
      - name: Update postgres Helm charts
        run: |
          for service in user verification post bid match; do
            helm upgrade --install ${service}-postgres /charts/${service}/charts/${service}-postgres \
              --set image.repository=$ECR_REGISTRY/$GIVEGETGO_REPO_NAME \
              --set image.tag=${service}-postgres-$IMAGE_TAG
          done
      
      - name: Package and upload Helm charts to S3
        run: |
          for dir in ./charts/*; do
            if [ -d "$dir" ]; then
              chart_name=$(basename $dir)
              # Check if there is a Chart.yaml file in the directory
              if [ -f "$dir/Chart.yaml" ]; then
                echo "Packaging $chart_name chart..."
                helm package $dir -d ./packaged-charts
                
                echo "Uploading $chart_name chart to S3..."
                helm s3 push ./packaged-charts/$chart_name-*.tgz s3://bucket/charts/
              fi
            fi
          done
        shell: bash

      # Decode env files for user-service and user-postgres
      - name: Decode Environment File and Create Secret for user-service
        run: |
          echo "${{ secrets.USER_SERVICE_ENV }}" | base64 -d > ./user-service.env
          kubectl create secret generic user-secrets --from-env-file=./user-service.env --namespace givegetgo-user
          echo "${{ secrets.USER_POSTGRES_ENV }}" | base64 -d > ./user-postgres.env
          kubectl create secret generic user-postgres-secrets --from-env-file=./user-postgres.env --namespace givegetgo-user
        shell: bash

      # Decode env files for verification-service and verification-postgres
      - name: Decode Environment File and Create Secret for verification-service
        run: |
          echo "${{ secrets.VERIFICATION_SERVICE_ENV }}" | base64 -d > ./verification-service.env
          kubectl create secret generic verification-secrets --from-env-file=./verification-service.env --namespace givegetgo-verification
          echo "${{ secrets.VERIFICATION_POSTGRES_ENV }}" | base64 -d > ./verification-postgres.env
          kubectl create secret generic verification-postgres-secrets --from-env-file=./verification-postgres.env --namespace givegetgo-verification
        shell: bash

      # Decode env files for post-service and post-postgres
      - name: Decode Environment File and Create Secret for post-service
        run: |
          echo "${{ secrets.POST_SERVICE_ENV }}" | base64 -d > ./post-service.env
          kubectl create secret generic post-secrets --from-env-file=./post-service.env --namespace givegetgo-post
          echo "${{ secrets.POST_POSTGRES_ENV }}" | base64 -d > ./post-postgres.env
          kubectl create secret generic post-postgres-secrets --from-env-file=./post-postgres.env --namespace givegetgo-post
        shell: bash

      # Decode env files for bid-service and bid-postgres
      - name: Decode Environment File and Create Secret for bid-service
        run: |
          echo "${{ secrets.BID_SERVICE_ENV }}" | base64 -d > ./bid-service.env
          kubectl create secret generic bid-secrets --from-env-file=./bid-service.env --namespace givegetgo-bid
          echo "${{ secrets.BID_POSTGRES_ENV }}" | base64 -d > ./bid-postgres.env
          kubectl create secret generic bid-postgres-secrets --from-env-file=./bid-postgres.env --namespace givegetgo-bid
        shell: bash
      
      # Decode env files for match-service and match-postgres
      - name: Decode Environment File and Create Secret for match-service
        run: |
          echo "${{ secrets.MATCH_SERVICE_ENV }}" | base64 -d > ./match-service.env
          kubectl create secret generic match-secrets --from-env-file=./match-service.env --namespace givegetgo-match
          echo "${{ secrets.MATCH_POSTGRES_ENV }}" | base64 -d > ./match-postgres.env
          kubectl create secret generic match-postgres-secrets --from-env-file=./match-postgres.env --namespace givegetgo-match
        shell: bash
