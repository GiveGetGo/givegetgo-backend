{"version":3,"file":"static/js/main.2377d434.js","mappings":"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","sources":["screens/LoginScreen.tsx","screens/ForgotPasswordScreen.tsx","screens/SignUpScreen.tsx","screens/CheckEmailScreen.tsx","screens/ConfirmationScreen.tsx","screens/MainScreen.tsx","App.tsx","webpack/bootstrap","webpack/runtime/chunk loaded","webpack/runtime/compat get default export","webpack/runtime/define property getters","webpack/runtime/global","webpack/runtime/hasOwnProperty shorthand","webpack/runtime/make namespace object","webpack/runtime/publicPath","webpack/runtime/jsonp chunk loading","webpack/startup"],"sourcesContent":["import React, { useState } from 'react';\nimport { StyleSheet, Text, View, TextInput, TouchableOpacity } from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\nimport { StackNavigationProp } from '@react-navigation/stack';\n\n// Define the types for your navigation stack\ntype RootStackParamList = {\n  ForgotPasswordScreen: undefined;\n  SignUpScreen: undefined;\n  MainScreen: undefined;\n};\n\n// Define the type for the navigation prop\ntype LoginScreenNavigationProp = StackNavigationProp<\n  RootStackParamList,\n  'ForgotPasswordScreen' | 'SignUpScreen' | 'MainScreen'\n>;\n\n\nconst LoginScreen: React.FC = () => {\n  const navigation = useNavigation<LoginScreenNavigationProp>();\n  const [email, setEmail] = useState<string>('');\n  const [password, setPassword] = useState<string>('');\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.welcome}>Welcome!</Text>\n      <TextInput\n        style={styles.input}\n        placeholder=\"Email\"\n        keyboardType=\"email-address\"\n        onChangeText={setEmail} // Update your state with the new text\n      />\n      <TextInput\n        style={styles.input}\n        placeholder=\"Password\"\n        secureTextEntry\n        onChangeText={setPassword} // Update your state with the new text\n      />\n      <TouchableOpacity\n        style={styles.loginButton}\n        onPress={() => {\n          navigation.navigate('MainScreen')\n          console.log(email, password);\n        }}\n      >\n        <Text style={styles.loginButtonText}>Login</Text>\n      </TouchableOpacity>\n\n      <TouchableOpacity onPress={() => navigation.navigate('ForgotPasswordScreen')}>             \n        <Text style={styles.linkText}>Forget password?</Text>\n      </TouchableOpacity>\n\n      <TouchableOpacity onPress={() => navigation.navigate('SignUpScreen')}>             \n        <Text style={styles.linkText}>Don’t have an account?</Text>\n      </TouchableOpacity>\n\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n    backgroundColor: '#fff', // adjust your background color\n  },\n  welcome: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginBottom: 48,\n  },\n  input: {\n    height: 40,\n    width: '100%',\n    marginVertical: 10,\n    borderBottomWidth: 1,\n    borderBottomColor: '#000', // adjust the color to match the design\n    fontSize: 16,\n    padding: 10,\n  },\n  loginButton: {\n    backgroundColor: '#d3d3d3', // adjust the color to match the design\n    paddingVertical: 12,\n    paddingHorizontal: 20,\n    borderRadius: 4,\n    marginTop: 24,\n  },\n  loginButtonText: {\n    color: '#000', // adjust the color to match the design\n    fontSize: 16,\n    fontWeight: '500',\n  },\n  forgotPassword: {\n    marginTop: 12,\n    color: '#000', // adjust the color to match the design\n  },\n  signUp: {\n    marginTop: 12,\n    color: '#000', // adjust the color to match the design\n  },\n  linkText: {\n    color: 'blue',\n    marginTop: 16,\n  },\n});\n\nexport default LoginScreen;\n\n\n/*\nimport React, { useState } from 'react';\nimport { StyleSheet, Text, View, TextInput, TouchableOpacity, Alert } from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\nimport { StackNavigationProp } from '@react-navigation/stack';\n\n// Define the types for your navigation stack\ntype RootStackParamList = {\n  ForgotPasswordScreen: undefined;\n  SignUpScreen: undefined;\n  MainScreen: undefined;\n};\n\n// Define the type for the navigation prop\ntype LoginScreenNavigationProp = StackNavigationProp<\n  RootStackParamList,\n  'ForgotPasswordScreen' | 'SignUpScreen' | 'MainScreen'\n>;\n\nconst LoginScreen: React.FC = () => {\n  const navigation = useNavigation<LoginScreenNavigationProp>();\n  const [email, setEmail] = useState<string>('');\n  const [password, setPassword] = useState<string>('');\n\n  const handleLogin = async () => {\n    const loginUrl = 'http://localhost:8080/v1/user/login'; // Change to your actual backend endpoint URL\n    const loginData = {\n      email,\n      password,\n    };\n\n    try {\n      const response = await fetch(loginUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(loginData),\n      });\n\n      const responseData = await response.json();\n\n      if (response.ok) {\n        navigation.navigate('MainScreen');\n        console.log(responseData); // Handle your success response\n      } else {\n        Alert.alert('Login Failed', responseData.message || 'Please check your credentials');\n      }\n    } catch (error) {\n      console.error('Login Error:', error);\n      Alert.alert('Login Error', 'Unable to connect to the server');\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.welcome}>Welcome!</Text>\n      <TextInput\n        style={styles.input}\n        placeholder=\"Email\"\n        keyboardType=\"email-address\"\n        onChangeText={setEmail}\n      />\n      <TextInput\n        style={styles.input}\n        placeholder=\"Password\"\n        secureTextEntry\n        onChangeText={setPassword}\n      />\n      <TouchableOpacity\n        style={styles.loginButton}\n        onPress={handleLogin}\n      >\n        <Text style={styles.loginButtonText}>Login</Text>\n      </TouchableOpacity>\n\n      <TouchableOpacity onPress={() => navigation.navigate('ForgotPasswordScreen')}>             \n        <Text style={styles.linkText}>Forget password?</Text>\n      </TouchableOpacity>\n\n      <TouchableOpacity onPress={() => navigation.navigate('SignUpScreen')}>             \n        <Text style={styles.linkText}>Don’t have an account?</Text>\n      </TouchableOpacity>\n\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n    backgroundColor: '#fff',\n  },\n  welcome: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginBottom: 48,\n  },\n  input: {\n    height: 40,\n    width: '100%',\n    marginVertical: 10,\n    borderBottomWidth: 1,\n    borderBottomColor: '#000',\n    fontSize: 16,\n    padding: 10,\n  },\n  loginButton: {\n    backgroundColor: '#d3d3d3',\n    paddingVertical: 12,\n    paddingHorizontal: 20,\n    borderRadius: 4,\n    marginTop: 24,\n  },\n  loginButtonText: {\n    color: '#000',\n    fontSize: 16,\n    fontWeight: '500',\n  },\n  linkText: {\n    color: 'blue',\n    marginTop: 16,\n  },\n});\n\nexport default LoginScreen;\n*/","import React, { useState } from 'react';\nimport { StyleSheet, View, Text, TextInput, TouchableOpacity } from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\nimport { StackNavigationProp } from '@react-navigation/stack';\n\n// Define the types for your navigation stack\ntype RootStackParamList = {\n  ForgotPasswordScreen: undefined;\n  CheckEmailScreen: undefined;\n  SignUpScreen: undefined;\n};\n\n// Define the type for the navigation prop\ntype ScreenNavigationProp = StackNavigationProp<\n  RootStackParamList,\n  'ForgotPasswordScreen' | 'CheckEmailScreen' | 'SignUpScreen'\n>;\n\nconst ForgotPasswordScreen: React.FC = () => {\n  const navigation = useNavigation<ScreenNavigationProp>();\n  const [email, setEmail] = useState<string>('');\n\n  const handleResetPassword = () => {\n    // Handle the reset password logic\n    navigation.navigate('CheckEmailScreen');\n    console.log('Reset password for:', email);\n  };\n\n  const handleSignUp = () => {\n    navigation.navigate('SignUpScreen');\n  };\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.titleText}>Oh, No! I Forgot</Text>\n      <Text style={styles.subtitleText}>Enter your email and we'll send you a link to change a new password</Text>\n\n      <TextInput\n        style={styles.input}\n        placeholder=\"Email\"\n        onChangeText={setEmail}\n        value={email}\n        keyboardType=\"email-address\"\n        autoCapitalize=\"none\"\n      />\n\n      <TouchableOpacity style={styles.button} onPress={handleResetPassword}>\n        <Text style={styles.buttonText}>Forgot Password</Text>\n      </TouchableOpacity>\n\n      <Text style={styles.text}>\n        Don't have an account?{' '}\n        <TouchableOpacity onPress={handleSignUp}>\n          <Text style={styles.linkText}>Sign Up</Text>\n        </TouchableOpacity>\n      </Text>\n    </View>\n  );\n};\n\n// You may want to customize these styles to match the UI provided in the Figma design\nconst styles = StyleSheet.create({\n  // ... other styles remain unchanged\n  titleText: {\n    fontSize: 32,\n    fontWeight: 'bold',\n    marginBottom: 8,\n  },\n  subtitleText: {\n    fontSize: 16,\n    marginBottom: 48,\n  },\n});\n\nexport default ForgotPasswordScreen;","/*import React, { useState } from 'react';\nimport { StyleSheet, View, Text, TextInput, TouchableOpacity } from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\nimport { StackNavigationProp } from '@react-navigation/stack';\n\n// Define the types for your navigation stack\ntype RootStackParamList = {\n  SignUpScreen: undefined;\n  CheckEmailScreen: undefined;\n  LoginScreen: undefined;\n};\n\n// Define the type for the navigation prop\ntype ScreenNavigationProp = StackNavigationProp<\n  RootStackParamList,\n  'SignUpScreen' | 'CheckEmailScreen' | 'LoginScreen'\n>;\n\nconst SignUpScreen: React.FC = () => {\n  const [email, setEmail] = useState<string>('');\n  const [password, setPassword] = useState<string>('');\n  const [schoolClass, setschoolClass] = useState<string>(''); // 'class' is a reserved word\n  const [major, setMajor] = useState<string>('');\n  const navigation = useNavigation<ScreenNavigationProp>();\n\n  const handleSignUp = () => { \n    console.log(\"test\");\n    // Handle the sign up logic\n    navigation.navigate('CheckEmailScreen');\n    console.log('Signing up with:', email, password, schoolClass, major);          \n    // Add validation for password match and call the API to sign up\n  };\n\n  const handleLogIn = () => { \n    navigation.navigate('LoginScreen');\n  };\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.titleText}>Sign Up</Text>\n      \n      <TextInput\n        style={styles.input}\n        placeholder=\"Email\"\n        onChangeText={setEmail}\n        value={email}\n        keyboardType=\"email-address\"\n        autoCapitalize=\"none\"\n      />\n      \n      <TextInput\n        style={styles.input}\n        placeholder=\"Password\"\n        secureTextEntry\n        onChangeText={setPassword}\n        value={password}\n      />\n      \n      <TextInput\n        style={styles.input}\n        placeholder=\"Class\"\n        onChangeText={setschoolClass}\n        value={schoolClass}\n      />\n\n      <TextInput\n        style={styles.input}\n        placeholder=\"Major\"\n        onChangeText={setMajor}\n        value={major}\n      />\n\n      <TouchableOpacity style={styles.button} onPress={handleSignUp}>\n        <Text style={styles.buttonText}>Sign Up</Text>\n      </TouchableOpacity>\n\n      <Text style={styles.text}>\n        Already have an account?{' '}\n        <TouchableOpacity onPress={handleLogIn}>\n          <Text style={styles.linkText}>Log In</Text>\n        </TouchableOpacity>\n      </Text>\n\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 16,\n    backgroundColor: '#fff',\n  },\n  titleText: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginBottom: 48,\n  },\n  input: {\n    height: 40,\n    width: '100%',\n    borderColor: 'gray',\n    borderWidth: 1,\n    marginBottom: 16,\n    paddingHorizontal: 8,\n  },\n  button: {\n    backgroundColor: 'gray',\n    padding: 10,\n    borderRadius: 5,\n    width: '100%',\n    alignItems: 'center',\n  },\n  buttonText: {\n    color: '#fff',\n  },\n  linkText: {\n    color: 'blue',\n    marginTop: 16,\n  },\n});\n\nexport default SignUpScreen;\n*/\n\n//const response = await fetch('http://localhost:8080/v1/user/register', {\n\n\nimport React, { useState } from 'react';\nimport { StyleSheet, View, Text, TextInput, TouchableOpacity } from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\nimport { StackNavigationProp } from '@react-navigation/stack';\n\n// Define the types for your navigation stack\ntype RootStackParamList = {\n  SignUpScreen: undefined;\n  CheckEmailScreen: undefined;\n  LoginScreen: undefined;\n};\n\n// Define the type for the navigation prop\ntype ScreenNavigationProp = StackNavigationProp<\n  RootStackParamList,\n  'SignUpScreen' | 'CheckEmailScreen' | 'LoginScreen'\n>;\n\n// Define the types for the state\ntype UserInput = {\n  email: string;\n  password: string;\n  username: string;\n};\n\nconst SignUpScreen: React.FC = () => {\n  const [userInput, setUserInput] = useState<UserInput>({ email: '', password: '', username: '' });\n  const navigation = useNavigation<ScreenNavigationProp>();\n\n  const handleSignUp = async () => {\n    console.log(\"Test: SignUp button clicked\");\n    try {\n        console.log(\"Attempting to register:\", userInput);\n\n        const response = await fetch('/v1/user/register', {\n        //const response = await fetch('http://128.210.106.61:8080/v1/user/register', {\n        //const response = await fetch('http://localhost:8081/v1/user/register:8080/v1/user/register', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                username: userInput.username,\n                email: userInput.email,\n                password: userInput.password\n            })\n        });\n\n        console.log(\"Response received:\", response);\n\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n\n        const data = await response.json();\n        console.log(\"Registration successful:\", data);\n\n        navigation.navigate('CheckEmailScreen');\n    } catch (error) {\n      console.error('Error during sign up:', error);\n\n      // Detailed logging for debugging\n      if (error instanceof TypeError) {\n          console.error('Network request failed. This can be due to network issues, CORS policy, or request timeout.', error.message);\n      } else {\n          console.error('An unexpected error occurred:', error.message);\n      }\n    }\n};\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.titleText}>Sign Up</Text>\n      \n      <TextInput\n        style={styles.input}\n        placeholder=\"Username\"\n        onChangeText={(text) => setUserInput({ ...userInput, username: text })}\n        value={userInput.username}\n      />\n\n      <TextInput\n        style={styles.input}\n        placeholder=\"Email\"\n        onChangeText={(text) => setUserInput({ ...userInput, email: text })}\n        value={userInput.email}\n        keyboardType=\"email-address\"\n        autoCapitalize=\"none\"\n      />\n      \n      <TextInput\n        style={styles.input}\n        placeholder=\"Password\"\n        onChangeText={(text) => setUserInput({ ...userInput, password: text })}\n        value={userInput.password}\n        secureTextEntry\n      />\n      \n      <TouchableOpacity style={styles.button} onPress={handleSignUp}>\n        <Text style={styles.buttonText}>Sign Up</Text>\n      </TouchableOpacity>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 16,\n    backgroundColor: '#fff',\n  },\n  titleText: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginBottom: 48,\n  },\n  input: {\n    height: 40,\n    width: '100%',\n    borderColor: 'gray',\n    borderWidth: 1,\n    marginBottom: 16,\n    paddingHorizontal: 8,\n  },\n  button: {\n    backgroundColor: 'gray',\n    padding: 10,\n    borderRadius: 5,\n    width: '100%',\n    alignItems: 'center',\n  },\n  buttonText: {\n    color: '#fff',\n  },\n  linkText: {\n    color: 'blue',\n    marginTop: 16,\n  },\n});\n\nexport default SignUpScreen;\n","import React, { useState, useEffect } from 'react';\nimport { StyleSheet, View, Text, TextInput, Image, TouchableOpacity } from 'react-native';\nimport { Button } from 'react-native-paper';\nimport { useNavigation } from '@react-navigation/native';\nimport { StackNavigationProp } from '@react-navigation/stack';\n\ntype RootStackParamList = {\n  // ... other screen names\n  CheckEmailScreen: undefined;\n  ConfirmationScreen: undefined;\n};\n\ntype ScreenNavigationProp = StackNavigationProp<\n  RootStackParamList,\n  'CheckEmailScreen' | 'ConfirmationScreen'\n>;\n\nconst CheckEmailScreen: React.FC = () => {\n  const navigation = useNavigation<ScreenNavigationProp>();\n  const [code, setCode] = useState('');\n  const [email, setEmail] = useState<string>('');\n\n  const handleCodeComplete = (code: string) => {\n    // This function is triggered when all seven digits are entered\n    console.log('Code entered:', code);\n    // Add your logic here, for example navigate to a new screen or verify the code\n  };\n  const handleCodeChange = (text: string) => {\n    if (text.length <= 7) {\n      setCode(text);\n      if (text.length === 7) {\n        handleCodeComplete(text);\n        handleConfirm();\n      }\n    }\n  };\n\n  const handleConfirm = () => {\n    navigation.navigate('ConfirmationScreen');\n  };\n\n  useEffect(() => {\n    // Fetch the email from the backend\n    const fetchEmail = async () => {\n      try {\n        const response = await fetch('URL_TO_YOUR_BACKEND/json_endpoint');\n        const json = await response.json();\n        setEmail(json.email); // Adjust this depending on the structure of your JSON\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    fetchEmail();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <TouchableOpacity onPress={() => navigation.goBack()} style={styles.backButton}>\n        <Text>←</Text> \n      </TouchableOpacity>\n      <Text style={styles.header}>GiveGetGo</Text>\n      <Image\n        source={require('./email_icon.png')} // Replace with your email icon path\n        style={styles.emailIcon}\n      />\n      <Text style={styles.title}>Check Your Email</Text>\n      <Text style={styles.subtitle}>\n        We have sent an email to {email} to confirm the validity of this email address.\n        After receiving the email, please enter the 7-digit code in the provided box.\n      </Text>\n      <View style={styles.container}>\n        <TextInput\n            style={styles.codeInput}\n            placeholder=\"_ _ _ _ _ _ _\"\n            value={code}\n            onChangeText={handleCodeChange}\n            keyboardType=\"number-pad\"\n            maxLength={7}\n            returnKeyType=\"done\"\n        />\n      </View>\n      <Button\n        mode=\"outlined\"\n        onPress={() => {\n          // Handle resend code logic\n        }}\n      >\n        Resend Code\n      </Button>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    padding: 20,\n    backgroundColor: '#fff',\n  },\n  backButton: {\n    alignSelf: 'flex-start',\n    marginBottom: 20,\n  },\n  header: {\n    // Style for your header\n  },\n  emailIcon: {\n    width: 100,\n    height: 100,\n    // Adjust the size as needed\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginVertical: 16,\n  },\n  subtitle: {\n    textAlign: 'center',\n    marginBottom: 40,\n  },\n});\n\nexport default CheckEmailScreen;","import React, { useState, useEffect } from 'react';\nimport { View, StyleSheet, Image, Text, TouchableOpacity } from 'react-native';\nimport { Button } from 'react-native-paper';\nimport { useNavigation } from '@react-navigation/native';\nimport { StackNavigationProp } from '@react-navigation/stack';\n\n// Define the types for your navigation stack\ntype RootStackParamList = {\n  ConfirmationScreen: undefined;\n  LoginScreen: undefined;\n};\n\n// Define the type for the navigation prop\ntype LoginScreenNavigationProp = StackNavigationProp<\n  RootStackParamList,\n  'ConfirmationScreen' | 'LoginScreen'\n>;\n\nconst ConfirmationScreen: React.FC = () => {\n  const checkIcon = require('./confirm_icon.jpg'); \n  const navigation = useNavigation<LoginScreenNavigationProp>();\n  const [email, setEmail] = useState<string>('');\n\n  const handleGoHome = () => {\n    // Navigation logic to go back to the home screen\n    navigation.navigate('LoginScreen');\n  };\n\n  useEffect(() => {\n    // Fetch the email from the backend\n    const fetchEmail = async () => {\n      try {\n        const response = await fetch('URL_TO_YOUR_BACKEND/json_endpoint');\n        const json = await response.json();\n        setEmail(json.email); // Adjust this depending on the structure of your JSON\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    fetchEmail();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.header}>GiveGetGo</Text>\n      <Image source={checkIcon} style={styles.icon} />\n      <Text style={styles.confirmedText}>Confirmed</Text>\n      <Text style={styles.emailText}>{email} has been confirmed</Text> \n      <Button mode=\"contained\" onPress={handleGoHome} style={styles.button}>\n        Home\n      </Button>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n    backgroundColor: '#fff', // adjust the background color as per your theme\n  },\n  header: {\n    position: 'absolute',\n    top: 20, // adjust the positioning as needed\n    left: 20, // adjust the positioning as needed\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  icon: {\n    width: 100, // Set the width as per your UI design\n    height: 100, // Set the height as per your UI design\n    marginBottom: 24, // adjust the spacing as per your UI design\n  },\n  confirmedText: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginBottom: 8,\n  },\n  emailText: {\n    fontSize: 16,\n    marginBottom: 48,\n  },\n  button: {\n    // Style your button with react-native-paper theming or custom styles\n  },\n});\n\nexport default ConfirmationScreen;\n","import React, { useState } from 'react';\nimport { StyleSheet, View, Text, TextInput, TouchableOpacity } from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\nimport { StackNavigationProp } from '@react-navigation/stack';\n\n// Define the types for your navigation stack\ntype RootStackParamList = {\n    MainScreen: undefined;\n};\n\n// Define the type for the navigation prop\ntype ScreenNavigationProp = StackNavigationProp<\n  RootStackParamList,\n  'MainScreen' \n>;\n\nconst MainScreen: React.FC = () => {\n    return (\n        <View style={styles.container}>\n        </View>\n      );\n\n};\n\nconst styles = StyleSheet.create({\n\n});\n\nexport default MainScreen;\n","// import { StatusBar } from \"expo-status-bar\";\n// import { StyleSheet, Text, View } from \"react-native\";\n\n// export default function App() {\n//   return (\n//     <View style={styles.container}>\n//       <Text>Open up App.tsx to start working on your app!</Text>\n//       <StatusBar style=\"auto\" />\n//     </View>\n//   );\n// }\n\n// const styles = StyleSheet.create({\n//   container: {\n//     flex: 1,\n//     backgroundColor: \"#fff\",\n//     alignItems: \"center\",\n//     justifyContent: \"center\",\n//   },\n// });\n\n///////////////////////////////////////////////////////\nimport React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport LoginScreen from './screens/LoginScreen';\nimport ForgotPasswordScreen from './screens/ForgotPasswordScreen';\nimport SignUpScreen from './screens/SignUpScreen'; \nimport CheckEmailScreen from './screens/CheckEmailScreen'; \nimport ConfirmationScreen from './screens/ConfirmationScreen'; \nimport MainScreen from './screens/MainScreen'; \n\nexport type RootStackParamList = {\n  LoginScreen: undefined;\n  ForgotPasswordScreen: undefined;\n  SignUpScreen: undefined;\n  CheckEmailScreen: undefined;\n  ConfirmationScreen: undefined;\n};\n\nconst Stack = createStackNavigator<RootStackParamList>();\n\nconst App: React.FC = () => {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator initialRouteName=\"LoginScreen\">\n        <Stack.Screen name=\"LoginScreen\" component={LoginScreen} options={{ headerShown: false }} />\n        <Stack.Screen name=\"ForgotPasswordScreen\" component={ForgotPasswordScreen} options={{ title: 'Forgot Password' }} />\n        <Stack.Screen name=\"SignUpScreen\" component={SignUpScreen} options={{ title: 'Sign Up' }} />\n        <Stack.Screen name=\"CheckEmailScreen\" component={CheckEmailScreen} options={{ title: 'Check Email' }} />\n        <Stack.Screen name=\"ConfirmationScreen\" component={ConfirmationScreen} options={{ title: 'Confirm' }} />\n        <Stack.Screen name=\"MainScreen\" component={MainScreen} options={{ title: 'Main' }} />\n        {/* You can add more screens to the navigator as needed */}\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n};\n\nexport default App;\n\n\n// Comments in return function will lead to error: \"text should be in...\"\n\n\n\n//login page 的 LOGIN\n\n//figma setting needs class,major","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"/\";","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t792: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkweb\"] = self[\"webpackChunkweb\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [699], () => (__webpack_require__(7961)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["styles","StyleSheet","create","container","flex","alignItems","justifyContent","padding","backgroundColor","welcome","fontSize","fontWeight","marginBottom","input","height","width","marginVertical","borderBottomWidth","borderBottomColor","loginButton","paddingVertical","paddingHorizontal","borderRadius","marginTop","loginButtonText","color","forgotPassword","signUp","linkText","navigation","useNavigation","_useState","useState","_useState2","_slicedToArray","email","setEmail","_useState3","_useState4","password","setPassword","_jsxs","View","style","children","_jsx","Text","TextInput","placeholder","keyboardType","onChangeText","secureTextEntry","TouchableOpacity","onPress","navigate","console","log","titleText","subtitleText","value","autoCapitalize","button","buttonText","text","borderColor","borderWidth","username","userInput","setUserInput","handleSignUp","_ref","_asyncToGenerator","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","data","json","error","TypeError","message","apply","arguments","_objectSpread","backButton","alignSelf","header","emailIcon","title","subtitle","textAlign","code","setCode","handleConfirm","useEffect","fetchEmail","goBack","Image","source","require","codeInput","length","handleCodeComplete","maxLength","returnKeyType","Button","mode","position","top","left","icon","confirmedText","emailText","checkIcon","Stack","createStackNavigator","NavigationContainer","Navigator","initialRouteName","Screen","name","component","LoginScreen","options","headerShown","ForgotPasswordScreen","SignUpScreen","CheckEmailScreen","ConfirmationScreen","MainScreen","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","call","m","deferred","O","result","chunkIds","fn","priority","notFulfilled","Infinity","i","fulfilled","j","Object","keys","every","key","splice","r","n","getter","__esModule","d","a","definition","o","defineProperty","enumerable","get","g","globalThis","this","Function","e","window","obj","prop","prototype","hasOwnProperty","Symbol","toStringTag","p","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","id","chunkLoadingGlobal","self","forEach","bind","push","__webpack_exports__"],"sourceRoot":""}