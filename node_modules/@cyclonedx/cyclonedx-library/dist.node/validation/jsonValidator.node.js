"use strict";
/*!
This file is part of CycloneDX JavaScript Library.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

SPDX-License-Identifier: Apache-2.0
Copyright (c) OWASP Foundation. All Rights Reserved.
*/
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _BaseJsonValidator_instances, _BaseJsonValidator_validator, _BaseJsonValidator_getValidator;
Object.defineProperty(exports, "__esModule", { value: true });
exports.JsonStrictValidator = exports.JsonValidator = void 0;
const promises_1 = require("fs/promises");
const resources_node_1 = require("../resources.node");
const baseValidator_1 = require("./baseValidator");
const errors_1 = require("./errors");
let _ajv;
async function getAjv() {
    if (_ajv === undefined) {
        let Ajv, addFormats, addFormats2019;
        try {
            [Ajv, addFormats, addFormats2019] = await Promise.all([
                Promise.resolve().then(() => require('ajv')).then((m) => m.default),
                Promise.resolve().then(() => require('ajv-formats')).then((m) => m.default),
                Promise.resolve().then(() => require('ajv-formats-draft2019'))
            ]);
        }
        catch (err) {
            throw new errors_1.MissingOptionalDependencyError('No JSON validator available.' +
                ' Please install all of the optional dependencies:' +
                ' ajv, ajv-formats, ajv-formats-draft2019', err);
        }
        const [spdxSchema, jsfSchema] = await Promise.all([
            (0, promises_1.readFile)(resources_node_1.FILES.SPDX.JSON_SCHEMA, 'utf-8').then(JSON.parse),
            (0, promises_1.readFile)(resources_node_1.FILES.JSF.JSON_SCHEMA, 'utf-8').then(JSON.parse)
        ]);
        const ajv = new Ajv({
            useDefaults: false,
            formats: {
                string: true
            },
            strict: false,
            strictSchema: false,
            addUsedSchema: false,
            schemas: {
                'http://cyclonedx.org/schema/spdx.SNAPSHOT.schema.json': spdxSchema,
                'http://cyclonedx.org/schema/jsf-0.82.SNAPSHOT.schema.json': jsfSchema
            }
        });
        addFormats(ajv);
        addFormats2019(ajv, { formats: ['idn-email'] });
        ajv.addFormat('iri-reference', true);
        _ajv = ajv;
    }
    return _ajv;
}
class BaseJsonValidator extends baseValidator_1.BaseValidator {
    constructor() {
        super(...arguments);
        _BaseJsonValidator_instances.add(this);
        _BaseJsonValidator_validator.set(this, void 0);
    }
    async validate(data) {
        const [doc, validator] = await Promise.all([
            (async () => JSON.parse(data))(),
            __classPrivateFieldGet(this, _BaseJsonValidator_instances, "m", _BaseJsonValidator_getValidator).call(this)
        ]);
        return validator(doc)
            ? null
            : validator.errors;
    }
}
_BaseJsonValidator_validator = new WeakMap(), _BaseJsonValidator_instances = new WeakSet(), _BaseJsonValidator_getValidator = async function _BaseJsonValidator_getValidator() {
    if (__classPrivateFieldGet(this, _BaseJsonValidator_validator, "f") === undefined) {
        const schemaFile = this._getSchemaFile();
        if (schemaFile === undefined) {
            throw new errors_1.NotImplementedError(this.version);
        }
        const [ajv, schema] = await Promise.all([
            getAjv(),
            (0, promises_1.readFile)(schemaFile, 'utf-8').then(JSON.parse)
        ]);
        __classPrivateFieldSet(this, _BaseJsonValidator_validator, ajv.compile(schema), "f");
    }
    return __classPrivateFieldGet(this, _BaseJsonValidator_validator, "f");
};
class JsonValidator extends BaseJsonValidator {
    _getSchemaFile() {
        return resources_node_1.FILES.CDX.JSON_SCHEMA[this.version];
    }
}
exports.JsonValidator = JsonValidator;
class JsonStrictValidator extends BaseJsonValidator {
    _getSchemaFile() {
        return resources_node_1.FILES.CDX.JSON_STRICT_SCHEMA[this.version];
    }
}
exports.JsonStrictValidator = JsonStrictValidator;
//# sourceMappingURL=jsonValidator.node.js.map